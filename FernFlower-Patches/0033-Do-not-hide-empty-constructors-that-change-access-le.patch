From 30d88a468fbd75354778ba9150871c202e63d7c5 Mon Sep 17 00:00:00 2001
From: LexManos <LexManos@gmail.com>
Date: Mon, 16 Dec 2019 18:31:02 -0800
Subject: [PATCH] Do not hide empty constructors that change access levels.


diff --git a/src/org/jetbrains/java/decompiler/main/ClassWriter.java b/src/org/jetbrains/java/decompiler/main/ClassWriter.java
index 4496675..fbb9661 100644
--- a/src/org/jetbrains/java/decompiler/main/ClassWriter.java
+++ b/src/org/jetbrains/java/decompiler/main/ClassWriter.java
@@ -553,6 +553,7 @@ public class ClassWriter {
     ClassWrapper wrapper = node.getWrapper();
     StructClass cl = wrapper.getClassStruct();
     MethodWrapper methodWrapper = wrapper.getMethodWrapper(mt.getName(), mt.getDescriptor());
+    int clFlags = node.type == ClassNode.CLASS_ROOT ? cl.getAccessFlags() : node.access;
 
     boolean hideMethod = false;
     int start_index_method = buffer.length();
@@ -754,7 +755,7 @@ public class ClassWriter {
             BytecodeMappingTracer codeTracer = new BytecodeMappingTracer(tracer.getCurrentSourceLine());
             TextBuffer code = root.toJava(indent + 1, codeTracer);
 
-            hideMethod = (clinit || dinit || hideConstructor(wrapper, init, throwsExceptions, paramCount)) && code.length() == 0;
+            hideMethod = (clinit || dinit || hideConstructor(wrapper, init, throwsExceptions, paramCount, clFlags, flags)) && code.length() == 0;
 
             buffer.append(code);
 
@@ -794,11 +795,18 @@ public class ClassWriter {
     return !hideMethod;
   }
 
-  private static boolean hideConstructor(ClassWrapper wrapper, boolean init, boolean throwsExceptions, int paramCount) {
+  private static boolean hideConstructor(ClassWrapper wrapper, boolean init, boolean throwsExceptions, int paramCount, int clFlags, int mtFlags) {
     if (!init || throwsExceptions || paramCount > 0 || !DecompilerContext.getOption(IFernflowerPreferences.HIDE_DEFAULT_CONSTRUCTOR)) {
       return false;
     }
 
+    int ACC_MASK = CodeConstants.ACC_PUBLIC | CodeConstants.ACC_PRIVATE | CodeConstants.ACC_PROTECTED;
+
+    int clAccess = clFlags & ACC_MASK;
+    int mtAccess = mtFlags & ACC_MASK;
+    if ((clFlags & (CodeConstants.ACC_ENUM | CodeConstants.ACC_ABSTRACT)) == 0 && clAccess != mtAccess)
+        return false; //Don't hide initalizers that change access level.
+
     int count = 0;
     for (StructMethod mt : wrapper.getClassStruct().getMethods()) {
       if (CodeConstants.INIT_NAME.equals(mt.getName())) {
-- 
2.19.1.windows.1

